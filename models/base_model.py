import uuid
from datetime import datetime
import json

"""
This is a class called BaseModel. It represents a base model with common attributes and methods for other models to inherit from.

Attributes:
- id: a unique identifier generated using the uuid module
- created_at: the date and time when the object is created, obtained using the datetime module
- updated_at: the date and time when the object is last updated, obtained using the datetime module

Methods:
- to_dict(): returns a dictionary representation of the object
- to_json(): returns a JSON string representation of the object
- from_dict(data): updates the object's attributes using the provided dictionary data
- from_json(json_str): updates the object's attributes using the provided JSON string data
"""
class BaseModel:
    def __init__(self):
        """
        Initializes the object by setting the id attribute to a unique identifier generated by the uuid.uuid4() function,
        and the created_at and updated_at attributes to the current datetime using the datetime.now() function.
        """
        self.id = str(uuid.uuid4())
        self.created_at = datetime.now()
        self.updated_at = datetime.now()

    def to_dict(self):
        return {
            'id': self.id,
            'created_at': str(self.created_at),
            'updated_at': str(self.updated_at)
        }

    def to_json(self):
        """
        Returns a JSON string representation of the object.

        Returns:
        str: A JSON string representation of the object.
        """
        return json.dumps(self.to_dict())

    def from_dict(self, data):
        """
        Populates the attributes of the `BaseModel` object from a dictionary.

        Args:
            data (dict): A dictionary containing the attribute values to be assigned to the `BaseModel` object.

        Returns:
            None: This method does not return any value. It updates the attributes of the `BaseModel` object directly.
        """
        if 'id' in data:
            self.id = data['id']
        if 'created_at' in data:
            self.created_at = datetime.strptime(data['created_at'], '%Y-%m-%d %H:%M:%S.%f')
        if 'updated_at' in data:
            self.updated_at = datetime.strptime(data['updated_at'], '%Y-%m-%d %H:%M:%S.%f')

    def from_json(self, json_str):
        """
        Populates the attributes of the object from a JSON string.

        Args:
            json_str (str): A JSON string containing the attribute values to be assigned to the object.

        Returns:
            None

        Example:
            # Create an instance of the BaseModel class
            base_model = BaseModel()

            # Define a JSON string
            json_str = '{"id": "123", "created_at": "2022-01-01 12:00:00.000", "updated_at": "2022-01-01 12:30:00.000"}'

            # Call the from_json method to populate the attributes of the base_model object from the JSON string
            base_model.from_json(json_str)

            # Print the attributes of the base_model object
            print(base_model.id)  # Output: 123
            print(base_model.created_at)  # Output: 2022-01-01 12:00:00.000
            print(base_model.updated_at)  # Output: 2022-01-01 12:30:00.000
        """
        try:
            data = json.loads(json_str)
            self.from_dict(data)
        except json.JSONDecodeError:
            pass

    def save(self):
        """
        Saves the object by updating the `updated_at` attribute to the current datetime.

        Returns:
        None: This method does not return any value. It updates the `updated_at` attribute of the `BaseModel` object directly.
        """
        self.updated_at = datetime.now()
        with open(f'{self.id}.json', 'w') as f:
            json.dump(self.to_dict(), f)

    def __str__(self):
        """
        Returns a string representation of the object.

        Returns:
        str: A string representation of the object.
        """
        return f"BaseModel(id={self.id}, created_at={self.created_at}, updated_at={self.updated_at})"
