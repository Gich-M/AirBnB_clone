import models
from uuid import uuid4
from datetime import datetime
import json
from . import storage

"""
This is a class called BaseModel. It represents a base model with common attributes and methods for other models to inherit from.

Attributes:
- id: a unique identifier generated using the uuid module
- created_at: the date and time when the object is created, obtained using the datetime module
- updated_at: the date and time when the object is last updated, obtained using the datetime module
- name: a string attribute to store the name, default is None
- my_number: a numerical attribute to store a number, default is None

Methods:
- to_dict(): returns a dictionary representation of the object
- to_json(): returns a JSON string representation of the object
- from_dict(data): updates the object's attributes using the provided dictionary data
- from_json(json_str): updates the object's attributes using the provided JSON string data
"""
class BaseModel:
    def __init__(self, *args, **kwargs):
        """
        Initializes the object by setting the id attribute to a unique identifier generated by the uuid.uuid4() function,
        and the created_at and updated_at attributes to the current datetime using the datetime.now() function.
        """
        self.id = str(uuid4())
        self.created_at = datetime.now()
        self.updated_at = datetime.now()
        self.name = kwargs.get('name')
        self.my_number = kwargs.get('number')

        if not kwargs:
            storage.new(self)
        if kwargs:
            for key, value in kwargs.items():
                if key in ['created_at', 'updated_at']:
                    value = datetime.strptime(value, '%Y-%m-%dT%H:%M:%S.%f')
                if key != '__class__':
                    setattr(self, key, value)


    def to_dict(self):
        """
        Returns a dictionary representation of the object.

        Returns:
        dict: A dictionary containing the attribute values of the object.
        """
        obj_dict = self.__dict__.copy()
        obj_dict['my_number'] = str(self.my_number)
        obj_dict['name'] = str(self.name)
        obj_dict['__class__'] = self.__class__.__name__
        obj_dict['updated_at'] = str(self.updated_at.isoformat())
        obj_dict['id'] = self.id
        obj_dict['created_at'] = str(self.created_at.isoformat())
        return obj_dict

    def to_json(self):
        """
        Returns a JSON string representation of the object.

        Returns:
        str: A JSON string representation of the object.
        """
        return json.dumps(self.to_dict())

    def save(self):
        """
        Saves the object by updating the `updated_at` attribute to the current datetime.

        Returns:
        None: This method does not return any value. It updates the `updated_at` attribute of the `BaseModel` object directly.
        """
        self.updated_at = datetime.now()
        models.storage.save()

    def __str__(self):
        """
        Returns a string representation of the object.

        Returns:
        str: A string representation of the object.
        """
        return "BaseModel(my_number=[{}], name={}, id={}, created_at={}, updated_at={})".format(self.my_number, self.name, self.id, self.created_at, self.updated_at)